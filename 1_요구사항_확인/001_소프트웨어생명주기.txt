소프트웨어 생명주기(Software Life Cycle)
-  소프트웨어를 개발하기 위한 설계, 운용, 유지보수 등의 과정을 각 단계별로 나눈것.

폭포수 모형(Waterfall Model)
-  이전단계로 돌아갈 수 없어 각 단계를 확실히 매듭짓고 결과를 검토하여 다음 단계를 진행
-  전통적인 소프트웨어 생명 주기 모형 = 고전적 생명 주기 모형
- 오래되어 성공 사례 많음
- 한단계씩 진행이라 두가지 과정도 병행 불가능하고 문제 생기면 기획부터 다시 해야함
=> 한 단계가 완전히 끝나야만 다음 단계로 넘어가는 개발 방법론

프로토타입 모형(Prototype Model,원형 모형)
- 폭포수와 달리 한번 떨어져도 다시 돌아감 => 원형
- 사용자의 요구사항을 파악하기 위해 견본품을 만들어 최종 결과물 예측
- 견본품은 사용자와 시스템 사이의 인터페이스에 중점 

나선형 모형(Spiral Model, 점진적 모형)
- 나선을 따라 돌듯 여러번의 소프트웨어 개발 과정을 거쳐 점진적으로 개발
- 보헴이 제안
- 폭포수와 프로토의 장점에 위험 분석기능 추가
- 누락되거나 추가된 요구사항을 첨가 가능
- 계획수립 -> 위험분석 -> 개발 및 검증 -> 고객 평가 
=> 4가지 활동을 반복하면서 유지보수 과정이 필요 없을만큼 완성도를 높힘

애자일 모형(Agile Model)
- 고객의 요구사항 변화에 유연하게 대응가능하도록 일정한 주기를 반복하면서 개발
- 특정 방법론이 아니라 고객과 지속적으로 소통하는 형태
- 폭포수와 대조적
- 대표적인 개발 모형 -> 스크럼(Scrum), XP(eXtreme Programing), 칸반(Kanban), Lean, 기능중심개발(FDD:Feature Driven Development)
- 4가지 핵심 가치 
=> 1. 개인과 상호작용, 2. 실해되는 SW 3. 고객과 협업 4. 변화에 반응

소프트웨어 공학(SE; Software Engineering)
- 소프트웨어의 우기를 극복하기 위한 방안(하드웨어에 맞춰서 발전되어야함)
- 소프트웨어의 품질과 생산성 향상을 목적으로 함
- 기본원칙 3가지
=> 1. 현대적인 프로그래밍 기술을 계속적으로 사용
    2. 품직이 유지되도록 지속적으로 검증
    3. 개발 관련 사항 및 결과에 대한 명확한 기록 유지