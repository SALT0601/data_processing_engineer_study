소프트웨어 개발 방법론
- 소프트웨어 개발, 유지보수 등에 필요한 수행 방법과 각종 기법 및 도구를 체계적으로 정리하여 표준화한것
- 소프트웨어 생산성과 품질 향상이 목적
- 주요 소프트웨어 개발 방법론
=> 구조적 방법론, 정보공학, 객체지향, 컴포넌트 기반(CBD), 제품 계열, 애자일 방법론

구조적 방법론 -> 프로그램의 기능을 각각 모듈화(부품화) 하여 필요한 기능 가져다가 씀
- 사용자의 요구사항을 문서화하는 처리중심의 방법론
- 1960년대까지 가장 많이 적용
- 쉬운 이해 및 검증이 목적
- 복잡한 문제는 분할과 정복 원리 적용
- 절차
=> 타당성 검토 -> 계획 -> 요구사항 -> 설계 -> 구현 -> 시험 -> 운용/유지보수

정보공학 방법론 -> 실제 업무 위주로 (ex. 사원, 급여, 창고, 세금)
- 정보 시스템 개발을 위해 계획, 분석, 설계, 구축에 정형화된 기법들을 상호연관성 있게 통합 및 적용하는 자료(Data) 중심의 방법론
- 대규모 정보 시스템 구축에 적합
- 절차
=> 정보 전략 계획 수립 -> 업무 영역 분석 -> 업무 시스템 설계 -> 업무 시스템 구축

객체지향 방법론
- 현실 세계의 개체(Entity)를 하나의 객체(Object)로 만들어 기계 부품을 조립하듯 객체를 조립해 소프트웨어 구현
- 소프트웨어 위기의 해결책으로 채택
- 구성 요소 
=> 객체 : 데이터와 매소드 묶은 하나의 모듈
     클래스 : 공통된 속성, 연산을 갖는 객체의 집합, 객체의 일반적인 타입
     메시지 : 상호작용 하는데 사용되는 수단(지시 명령, 요구 사항)
- 기본 원칙
=> 캡슐화(Encapsulation) : 데이터와 데이터 처리 함수 하나로 묶는 것
     정보 은닉(Information Hiding) : 캡슐화에서 가장 중요한 개념, 다른 객체에 자신의 정보 숨기고 자신의 연산만을 통해 접근 허용
     추상화(Abstraction) : 불필요한 부분 생략, 객체의 속성 중 가장 중요한 것에 중점
     상속성(Inheritance) : 이미 정의된 상위 클래스의 모든 속성과 연산을 하위 클래스가 물려 받음
     다형성(Polymorphism) : 하나의 메시지에 대해 각 객체가 가지고 있는 고유한 방법으로 응답할 수 있는 능력
- 절차
=> 요구분석 -> 설계 -> 구현 -> 테스트 및 검증 -> 인도
     
컴포넌트 기반(CBD;Component Based Design) 방법론
- 컴포넌트 : 이미 검증된 자주 쓰는 기능을 모아 종류별로 묶어 라이브러리로 지원(ex. 통신 관련 기능 모음, DB 관련 기능 모음 등을 컴포넌트라 부름)
- 컴포넌트를 조합하여 새로운 애플리케이션을 만드는 방법론
- 재사용이 가능해 시간과 노력 절감
- 새 기능 추가가 간간해 확장성 보장
- 유지 보수 비용 최소화, 생산성 및 품질 향상 가능
- 절차
=> 개발 준비 -> 분석 -> 설계 -> 구현 -> 테스트 -> 전개 -> 인도

제품 계열 방법론
- 특정 제품에 적용하고 싶은 공통된 기능을 정의하여 개발
- 임베디드 소프트웨어에 적합
- 영역공학과 응용공학으로 구분
=> 영역공학 : 영역분석, 영역설계, 핵심 자신 구현
     응용공학 : 제품 요구 분석, 제품 설계, 제품 구현
- 영역공학과 응용공학 연계를 위해 요구사항, 아키텍처, 조립생산이 필요
     