회복 / 병행제어

회복
- 데이터베이스가 손상되었을 때 손상되기 이전의 정상 상태로 복구하는 작업
- 종류
-> 연기 갱신 기법 : 트랜잭션이 성공적으로 완료될 때까지 데이터베이스에 실질적인 갱신 연기하는 방법, Redo 작업만 가능
-> 즉각 갱신 기법 : 트랜잭션이 데이터를 갱신하면 트랜잭션이 부분 완료되기 전이라도 즉시 실제 데이터베이스에 반영, Redo, Undo 모두 사용 가능
-> 그림자 페이지 대체기법 : 갱신이전의 데이터베이스를 일정 크기의 페이지 단위로 구성해 각 페이지마다 복사본인 그림자 페이지를 별도 보관, 장애 발생하면 그림자 페이지로 대체
-> 검사점 기법 : 트랜잭션 실행 중 특정 단계에서 재실행할 수 있게 갱신 내용이나 시스템에 대한 상황 등 정보와 함께 검사점을 로그에 보관해두고 장애 발생 시 검사점부터 회복 작업 수행해 회복시간 절약

병행제어
- 동시에 실행되는 트랜잭션 간 상호작용을 제어하는 것
- 병행제어 없이 동시 접근 허용할 경우 갱신 분실, 비완료 의존성, 모순성, 연쇄 복귀 등 문제 발생
- 종류
-> 로킹 : 트랜잭션들이 어떤 로킹 단위를 액세스하기 전 Lock을 요청해서 Lock이 허락되어야만 그 로킹 단위를 액세스할 수 있도록 함
-> 타임 스탬프 순서 : 트랜잭션과 트랜잭션이 읽거나 갱신한 데이터에 대해 트랜잭션이 실행을 시작하기전에 시간표를 부여하여 부여된 시간에 따라 트랜잭션 작업 수행
-> 최적 병행수행(검증 기법, 확인 기법, 낙관적 기법) : 병행수행하고자 하는 대부분의 트랜잭션이 판독 전용 트랜잭션일 경우 트랜잭션 간 충돌률이 매우 낮아 병행제어 기법을 사용하지 않고 실행되어도 많은 트랜잭션은 시스템의 상태를 일관성 있게 유지한다는 점 이용
-> 다중 버전 기법 = 다중 버전 타임 스탬프 기법 : 타임 스탬프의 개념 이용, 갱신될 때 마다의 버전을 부여하여 관리

로킹 단위
- 병행제어에서 한꺼번에 로킹할 수 있는 객체의 크기
- 데이터베이스, 파일, 레코드, 필드 등
- 로킹 단위가 크면 로크 수가 작아 관리 쉬움, 병행성 수준 낮아짐(데이터베이스 공유도 감소)
- 로킹 단위 작으면 로크 수가 많아 관리 복잡해 오버에드 증가, 병행성 수준 높아짐