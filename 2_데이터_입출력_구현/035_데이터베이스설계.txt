데이터베이스 설계
- 사용자 요구 분석해 그것을 컴퓨터에 저장할 수 있는 데이터베이스 구조에 맞게 변형 후 DBMS로 데이터베이스를 구현하여 일반 사용자들이 사용하게 하는 것

데이터베이스 설계 시 고려사항
- 무결성 : 삽입, 삭제, 갱신 등 연산 후에도 데이터베이스에 저장된 데이터가 정해진 제약 조건 항상 만족해야 함
- 일관성 : 저장된 데이터들 사이나 특정 질의에 대한 응답이 변함없이 일정해야 함
- 회복 : 시스템 장애가 발생했을 때 장애 발생 직전의 상태로 복구 가능해야 함
- 보안 : 불법 데이터의 노출 또는 변경, 손실로부터 보호 가능해야 함
- 효율성 : 응답시간 단축, 시스템 생산성, 저장공간 최적화 등이 가능해야 함
- 데이터베이스 확장 : 데이터베이스 운영에 영향 주지 않으면서 지속적으로 데이터 추가 가능해야 함

데이터베이스 설계 순서
요구 조건 분석(요구 조건 명세서 작성)
-> 개념적 설계(개념 스키마, 트랜잭션 모델링, E-R 모델링)
-> 논리적 설계(목표 DBMS에 맞는 논리 스키마 설계, 트랜잭션 인터페이스 설계)
-> 물리적 설계(목표 DBMS에 맞는 물리적 구조의 데이터로 변환)
-> 구현(목표 DBMS의 DDL(데이터 정의어)로 데이터베이스 생성, 트랜잭션 작성)

요구 조건 분석
- 데이터베이스를 사용할 사람들로부터 필요한 용도를 파악
- 사용자에 따른 수행 업무, 데이터 종류, 용도, 제약조건 등 수집
- 수집된 정보를 바탕으로 요구 조건 명세 작성

개념적 설계(정보 모델링, 개념화)
- 현실 세계에 대한 인식을 추상적 개념으로 표현
- 개념 스키마 모델링과 드랜잭션(하나의 작업을 처리하기 위한 논리적 작업 단위) 모델링 병행 수행
- 요구 조건 명세를 DBMS에 독립적인 E-R 다이어그램으로 작성
- DBMS에 독립적인 개념 스키마 설계

논리적 설계(데이터 모델링)
- 현실 세계에서 발생하는 자료를 저장할 수 있게 특정 DBMS가 지원하는 논리적 자료 구조로 변환(mapping)시키는 과정
- 개념 세계 데이터를 필드로 기술된 데이터 타입과 데이터 타입 간의 관계로 표현되는 논리적 구조의 데이터로 모델화
- 개념 스키마를 평가 및 정제, DBMS에 따라 서로 다른 논리적 스키마 설계(개념적 설계 - 개념 스키마 설계)
- 트랜잭션의 인터페이스 설계

물리적 설계(데이터 구조화)
- 논리적 구조로 표현된 데이터를 저장할 수 있는 물리적 구조의 데이터로 변환하는 과정
- 다양한 데이터베이스 으용에 대해 처리 성능을 얻기 위해 데이터베이스 파일 저장 구조 및 액세스 경로 설정
- 저장 레코드의 형식, 순서, 접근 경로 등 정보 사용해 데이터가 컴퓨터에 저장되는 방법 묘사

데이터베이스 구현
- 논리적 설계와 물리적 설계에서 도출된 데이터베이스 스키마를 파일로 생성하는 과정
- DBMS의 DDL을 이용해 데이터베이스 스키마 기술한 수 컴파일하여 빈 데이터베이스 파일 생성
- 응용 프로그램을 위한 트랜잭션 작성
- 데이터베이스 접근을 위한 응용 프로그램 작성

