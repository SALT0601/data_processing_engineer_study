데이터베이스 백업
- 전산장비의 장애에 대비해 데이터베이스에 저장된 데이터 보호하고 복구하기 위한 작업
- 치명적 데이터 손실을 막기 위해 데이터베이스 정기적으로 백업해야 함

로그파일
- 데이터베이스의 상태 변화를 시간의 흐름에 따라 모두 기록한 파일
- 복구를 위해 필요한 가장 기본적 자료
- 로그 파일을 기반으로 데이터베이스를 과거 상태로 복구(UNDO)시키거나 현재 상태로 재생(REDO)시켜 데이터베이스 상태 일관성 있게 유지 가능
- 트랜잭션 시작 시점, 롤백 시점, 데이터 입력, 수정 삭제 시점 등에서 기록

데이터베이스 복구 알고리즘
-> NO-UNDO/REDO 
     - 데이터베이스 버퍼의 내용을 비동기적 갱신(트랜잭션이 완료된 내용을 이렁 주기나 작업량에 따라 시간 차를 두고 저장매체에 기록)한 경우의 복구 알고리즘
     - NO_UNDO : 트랜잭션 완료 전에는 변경 내용이 데이터베이스에 기록되지 않으므로 취소할 필요 없음
     - REDO : 트랜잭션 완료 후 데이터베이스 버퍼에 기록되어 있고 저장매체에는 기록되지 않았으므로 트랜잭션 내용 다시 실행
-> UNDO/NO-REDO
     - 데이터베이스 버퍼의 내용을 동기적 갱신(트랜잭션이 완료되기 전 데이터베이스 버퍼 내용을 동시적으로 저장매체에 기록)한 경우의 복구 알고리즘
     - UNDO : 트랜잭션 완료 전 시스템이 파손되었다면 변경된 내용 취소
     - NO-REDO : 트랜잭션 완료 전 데이터베이스 버퍼 내용을 이미 저장매체에 기록했으므로 트랜잭션 내용 다시 실행할 필요 없음
-> UNDO/REDO 
     - 데이터베이스 버퍼의 내용을 동기/비동기적 갱신한 경우의 복구 알고리즘
     - 데이터베이스 기록 전에 트랜잭션이 완료될 수 있으므로 완료된 트랜잭션이 데이터베이스에 기록되지 못했다면 다시 실행
-> NO-UNDO/NO-REDO 
     - 데이터베이스 버퍼의 내용을 동기적으로 저장매체에 기록하지만 데이터베이스와는 다른 영역에 기록한 경우의 복구 알고리즘
     - NO-UNDO : 변경 내용은 데이터베이스와 다른 영역에 기록되어 있어 취소할 필요 없음
     - NO-REDO : 다른 영역에 이미 기록되어 있어 트랜잭션을 다시 실행할 필요 없음

백업 종류
- 복구 수준에 따라 운영체제 이용하는 물리 백업과 DBMS 유틸리티 이용하는 논리 백업으로 나눔
- 물리 백업 : 데이터베이스 파일 백업 방법, 백업 속도 빠르고 작업 단순, 문제 발생 시 원인 파악 및 문제 해결 어려움
- 논리 백업 : DB내의 논리적 객체들을 배열, 복원시 데이터 손상 막고 문제 발생 시 원인파악 및 해결 수월, 백업/복원시 시간 많이 소요
