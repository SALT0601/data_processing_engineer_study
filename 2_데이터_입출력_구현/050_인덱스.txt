인덱스
- 레코드를 빠르게 접근하기 위해 <키 값,포인터> 쌍으로 구성되는 데이터 구조
- 레코드가 저장된 물리적 구조에 접근하는 방법 제공
- 파일의 레코드에 빠르게 액세스 가능
- 레코드의 삽입,삭제가 수시로 일어나는 경우 인덱스의 개수를 최소로 하는것이 효율적


인덱스의 종류
- 트리 기반 인덱스 : 인덱스를 저장하는 블록들이 트리 구조를 이룸
- 비트맵 인덱스 : 인덱스 컬럼의 데이터를 Bit 값인 0 또는 1로 변환해 인덱스 키로 사용
- 함수 기반 인덱스 : 컬럼의 값 대신 컬럼에 특정 함수나 수식을 적용해 산출된 값 사용
- 비트맵 조인 인덱스 : 다수의 조인된 객체로 구성
- 도메인 인덱스 : 개발자가 필요한 인덱스를 직접 만들어 사용

클러스터드/넌클러스터드 인덱스
- 클러스터드 인덱스 
-> 인덱스 키의 순서에 따라 데이터가 정렬되어 저장
    실제 데이터가 순서대로 저장되어 있어 인덱스를 검색하지 않아도 원하는 데이터 빠르게 찾기 가능
- 넌클러스터드 인덱스
-> 인덱스의 키 값만 정렬, 실제 데이터는 정렬되지 않음
    데이터 삽입, 삭제 발생 시 순서를 유지하기 위해 데이터 재정렬해야 함