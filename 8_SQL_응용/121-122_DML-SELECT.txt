DML - SELECT

일반 형식
SELECT [PREDICATE] [테이블명.]속성명 [AS 별칭][, [테이블명.]속성명, ...]
[, 그룹함수(속성명) [AS 별칭]]
[, Window함수 OVER (PARTITION BY 속성명1, 속성명2, ... ORDER BY 속성명3, 속성명4, ...)]
FROM 테이블명[, 테이블명, ...]
[WHERE 조건]
[GROUP BY 속성명, 속성명, ''']
[HAVING 조건]
[ORDER BY 속성명 [ASC | DESC]];

- PREDICATE : 검색할 튜플 수 제한(DISTINT : 중복된 튜플 있으면 그중 첫번째 한개만 표시)
- AS : 속성이나 연산의 이름을 다른 이름으로 표시
- 그룹함수 : GROUP BY절에 지정된 그룹별로 속성의 값을 집계할 함수를 기술
- WINDOW 함수 : GROUP BY절 이용하지 않고 속성의 값을 집계할 함수 기술
-> PARTITION BY : WINDOW 함수의 적용 범위가 될 속성
-> ORDER BY : PARTITION 안에서 정렬 기준으로 사용할 속성 지정
- GROUP BY 절 : 특정 속성을 기준으로 그룹화하여 검색할 때 사용, 보통 그룹 함수와 함께 사용
- HAVING 절 : GROUP BY와 함께 사용, 그룹에 대한 조건 지정
- ORDER BY절 : 데이터를 정렬하여 검색할 때 사용 (속성명이 정렬의 기준)

조건 연산자
- 비교 연산자 : 같지 않다 : <>
- LIKE 연산자 : 대표 문자 이용해 지정된 속성의 값이 문자 패턴과 일치하는 튜플 검색 위해 사용
-> % : 모든 문자 대표 / _ : 문자 하나를 대표 / # : 숫자 하나를 대표

그룹 함수
- COUNT(속성명) : 그룹별 튜플 수 구함
- SUM(속성명) : 그룹별 합계 구함
- AVG(속성명) : 그룹별 평균 구함
- MAX(속성명) : 그룹별 최대값 구함
- MIN(속성명) : 그룹별 최소값 구함
- STDDEV(속성명) : 그룹별 표준편차 구함
- VARIANCE(속성명) : 그룹별 분산 구함
- ROLLUP(속성명, 속성명, ...) : 인수로 주어진 속성을 대상으로 그룹별 소계를 구하는 함수
			: 속성의 개수가 n개면  n+1 레벨까지, 하위 레벨에서 상위 레벨 순으로 데이터 집계
- CUBE(속성명, 속성명, 속성명, ...) : ROLLUP과 유사한 형태지만 인수로 주어진 속성을 대상으로 모든 조합의 그룹별 소계 구함
			      : 속성의 개수가 n개면 2^n 레벨까지, 상위에서 하위 레벨 순으로 데이터 집계

WINDOW 함수
- GROUP BY절 이용하지 않고 함수의 인수로 지정한 속성의 값 집계
- 함수의 인수로 지정한 속성이 집계할 범우 -> 윈도우라 함
- ROW_NUMBER() : 윈도우별로 각 레코드에 대한 일련번호 반환
- RANK() : 윈도우별로 순위 반환, 공동 순위 반영
- DENSE_RANK() : 윈도우별 순위 반환, 공동 순위 무시하고 순위 부여

기본 검색
- SELECT * FROM 사원; /  SELECT 사원.이름 FROM 사원; /  SELECT 이름 FROM 사원;
- SELECT DISTINCT 주소 FROM 사원;
- SELECT 부서+'부서의' AS 부서2 FROM 사원;

조건 지정 검색
- SELECT * FROM 사원 WHERE 부서 = '기획' OR 부서 = '인터넷'; / SELECT * FROM 사원 WHERE 부서 IN('기획', '인터넷') -> IN은 하나의 필드일때만 가능;
- SELECT * FROM 사원 WHERE 이름 LIKE "김%";
- SELECT * FROM 사원 WHERE 주소 IS NULL;

정렬 검색
- SELECT TOP 2 * FROM 사원 ORDER BY 부서 ASC, 이름 DESC;

하위 질의
- SELECT 이름, 주소 FROM 사원 WHERE 이름 = (SELECT 이름 FROM 여가활동 WHERE 취미 = '나이트댄스');
- SELECT * FROM 사원 WHERE 이름 NOT IN (SELECT 이름 FROM 여가활동); -> 포함되지 않는
- SELECT * FROM 사원 WHERE 이름 EXISTS (SELECT 이름 FROM 여가활동 WHERE 여가활동.이름 = 사원.이름); -> 하위질의로 검색된 결과가 존재하는지
 
복수 테이블 검색
- SELECT 사원.이름, 사원.부서, 여가활동.취미
   FROM 사원, 여가활동
   WHERE 사원.이름 = 여가활동.이름;

WINDOW 함수 이용 검색
- SELECT 상여내역, 상여금, 
	ROW_NUMBER() OVER (PARTITION BY 상여내역 ORDER BY 상여금 DESC) AS N)
  FORM 상여금;
- SELECT 상여내여ㄱ, 상여금, 
	RANK() OVER (PARTITION BY 상여내역 ORDER BY 상여금 DESC) AS 상여금순위
  FROM 상여금;

그룹 지정 검색
- SELECT 부서, AVG(상여금) AS 평균 FROM 상여금 GROUP BY 부서;
- SELECT 부서, COUNT(*) AS 사원수 FROM 상여금 WHERE 상여금 >= 100 GROUP BY 부서 HAVING COUNT(*) >= 2;
- SELECT 부서, 상여내역, SUM(상여금), AS 상여금 합계 FROM 상여금 GROUP BY ROLLUP(부서, 상여내역);

집합 연산자를 이용한 통합 질의
- 표기 형식 : SELECT 속성명1, 속성명2, ...
	     FROM 테이블명
	     UNION | UNION ALL | INTERSECT | EXCEPT
	     SELECT 속성명1, 속성명2, ...
	     FROM 테이블명
	     [ORDER BY 속성명 [ASC | DESC]];
- 두 개의 SELECT문에 기술한 속성들은 개수와 데이터 유형이 서로 동일해야함
- 집합 연산자의 종류(통합 질의의 종류)
-> UNION(합집합) : 두 셀렉트문의 조회 결과를 통합해 모두 출력, 중복된 행은 한 번만 출력
-> UNION ALL(합집합) : 두 셀렉트문의 조회 결과를 통합해 모두 출력, 중복된 행도 그대로 출력
-> INTERSECT(교집합) : 두 셀렉트문의 조회 결과 중 공통된 행만 출력
-> EXCEPT(차집합) : 첫번째 셀렉트문의 조회 결과에서 두번째 셀렉트문의 조회 결과를 제외한 행 출력

- SELECT * FROM 사원 UNION SELECT * FROM 직원;