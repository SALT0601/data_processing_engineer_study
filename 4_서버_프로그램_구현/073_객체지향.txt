객체지향(Object-Oriented)
- 각 요소들을 객체로 만든 후 객체들을 조립해서 소프트웨어를 개발하는 기법
- 구조적 기법의 문제점으로 인한 소프트웨어 우기의 해결책으로 채택되어 사용
- 소프트웨어의 재사용 및 확장이 용이해 고품질의 소프트웨어를 빠르게 개발 가능하고 유지보수 쉬움
- 구성 요소 : 객체, 클래스, 메시지
- 객체지향 특징 : 캡슐화, 상속, 다형성, 연관성

객체(Object)
- 데이터와 이를 처리하기 위한 함수를 묶어 놓은 소프트웨어 모듈
- 데이터 : 객체가 가지고 있는 정보 (속성, 상태, 분류, 변수, 상수, 자료 구조)
- 함수 : 객체가 수행하는 기능, 객체가 갖는 데이터 처리하는 알고리즘, 객체 상태 참고하거나 변경하는 수단(메소드, 서비스, 동작, 연산)

클래스(Class)
- 공통된 속성과 연산을 갖는 객체의 집합
- 각각의 객체들이 갖는 속성과 연산 정의하고 있는 틀
- 클래스에 속한 각각의 객체를 인스턴스라고 함

메시지
- 객체들 간 상호작용에 사용되는 수단, 객체의 동작이나 연산을 일으키는 외부의 요구 사항
- 메시지를 받은 객체는 대응하는 연산 수행해 예상된 결과 반환

캡슐화(Encapsulation)
- 외부에서 접근을 제한하기 위해 인터페이스를 제외한 세부 내용을 은닉
- 캡슐화된 객체는 외부 모듈의 변경으로 인한 파급 효과 적음
- 객체들 간 메시지를 주고받을 때 상대 객체의 세부 내용은 알 필요 없으므로 인터페이스 단순, 객체 간 결합도 낮아짐

상속(Inheritance)
- 상위 클래스의 모든 속성과 연산을 하위 클래스가 물려받는 것
- 하위 클래스는 물려받은 속성과 연산을 다시 정의하지 않아도 즉시 자신의 속성으로 사용 가능
- 하위 클래스는 상속받은 속성과 연산 외에 새로운 속성과 연산을 첨가하여 사용 가능

다형성(Polymorphism)
- 하나의 메시지에 대해 각각의 객체가 가지고 있는 고유한 방법으로 응답할 수 있는 능력
- 객체들은 동일한 메소드명 사용하며 같은 의미의 응답을 함 -> 하나의 메시지에 대해 여러 가지 형태의 응답이 있다는것
- ex. + 연산자는 숫자에선 덧셈 문자에선 문자열 연결 기능

연관성(Relationship)
- 두 개 이상의 객체들이 상호 참조하는 관계
- 종류
-> is member of : 연관화 : 2개 이상의 객체가 상호 관련되어 있음
    is instance of : 분류화 : 동일한 형의 특성을 갖는 객체들을 모아 구성
    is part of : 집단화 : 관련 있는 객체들 묶어 하나의 상위 객체 구성
    is a : 일반화 : 공통적 성질들로 추상화한 상위 객체 구성
         : 특수화/상세화 : 상위 객체를 구체화해 하위 객체 구성
