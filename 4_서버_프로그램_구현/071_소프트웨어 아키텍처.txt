소프트웨어 아키텍처
- 소프트웨어를 구성하는 요소들 간의 관계를 표현하는 시스템의 구조 또는 구조체
- 애플리케이션 분할 방법과 분할된 모듈에 할당될 기능, 모듈 간 인터페이스 등 결정
- 기본 원리에는 모듈화, 추상화, 단계적 분해, 정보은닉이 있음

모듈화(Modularity)
- 소프트웨어 성능 향상, 시스템 수정 및 재사용, 유지 관리 등 용이하도록 시스템의 기능들을 모듈(특정 기능을 처리할 수 있는 소스코드)단위로 나누는것
- 모듈의 크기를 너무 작게 나누면 개수가 많아져 모듈 간 통합 비용이 많이 듦
- 모듈의 크기를 너무 크게 나누면 개수가 적어 통합 비용은 적게 들지만 모듈 하나의 개발 비용이 많이 듦

추상화(Abstraction)
- 전체적이고 포괄적인 개념을 설계한 후 차례로 세분화해 구체화시켜 나가는 것
- 완전한 시스템 구축 전 그 시스템과 유사한 모델을 만들어 여러가지 요인들 테스트 할 수 있음
- 불필요한 부분 생략하고 필요한 부분 강조해 모델화하는 것
- 추상화 유형
-> 과정 추상화 : 자세한 수행 과정 정의하지 않고 전반적 흐름만 파악할수 있게 설계
-> 데이터 추상화 : 데이터의 세부적 속성이나 용도 정의하지 않고 데이터 구조를 대표할 수 있는 표현으로 대체
-> 제어 추상화 : 이벤트 발생의 정확한 절차나 방법 정의하지 않고 대표할 수 있는 표현으로 대체

단계적 분해(Stepwise Refinement)
-  상위의 중요개념으로부터 하위의 개볍ㅁ으로 구체화시키는 분할 기법
- Niklaus Wirth가 제안한 하향식 설계
- 소프트웨어 포괄적 기능부터 시작해 점차적으로 구체화, 알고리즘, 자료구조 등 상세 내역은 가능한 한 뒤로 미루어 진행

정보 은닉(Information Hiding)
- 한 모듈 내부에 포함된 절차나 자료들의 정보가 감추어져 다른 모듈이 접근하거나 변경하지 못하도록 하는 기법
- 모듈을 독립적으로 수행 가능
- 하나의 모듈이 변경되더라도 다른 모듈에 영향 주지 않아 수정, 시험, 유지보수 용이

상위 설계와 항위 설계
                      상위 설계                          하위 설계
- 별칭        아키텍처 설계, 예비 설계     모듈 설계, 상세 설계
- 설계 대상  시스템의 전체적 구조         시스템 내부 구조 및 행위
- 세부 목록  구조, DB, 인터페이스          컴포넌트, 자료 구조, 알고리즘

소프트웨어 아키텍처의 품질 속성
- 소프트웨어 아키텍처가 이해 관계자들이 요구하는 수준의 품질 유지 및 보장 가능하게 설계되었는지 확인하기 위해 품질 평가 요소들 구체화 시켜 놓은 것
- 종류
-> 시스템 측면 : 성능, 보안, 가용성, 기능성, 사용성, 변경 용이성, 확장성 등
-> 비즈니스 측면 : 시장 적시성, 비용과 혜택, 예상 시스템 수명, 목표 시장, 공개 일정 등
-> 아키텍처 측면 : 개념적 무결성, 정확성, 완결성, 구축 가능성, 변경성, 시험성 등

소프트웨어 아키텍처의 설계 과정
- 설계 목표 설정(요구사항 분석해 전체 시스템의 설계 목표 설정)
-> 시스템 타입 결정(시스템과 서브시스템 타입 결정하고 아키텍처 패턴 선택)
-> 아키텍처 패턴 적용(시스템의 표준 아키텍처 설계)
-> 서브시스템 구체화(서브시스템의 기능 및 서브시스템 간 상호작용 위한 동작과 인터페이스 정의
-> 검토(설계 목표, 요구사항, 설계의 기본 원리 등 만족하는지 아키텍처 검토)

협약에 의한 설계
- 컴포넌트를 설계할 때 클래스에 대한 여러 가정을 공유할 수 있도록 명세한 것
- 컴포넌트에 대한 정확한 인터페이스 명세
- 명세에 포함될 조건
-> 선행 조건 : 오퍼레이션이 호출되기 전 참이 되어야할 조건
-> 결과 조건 : 오퍼레이션이 수행된 후 만족되어야 할 조건
-> 불변 조건 : 오퍼레이션이 실행되는 동안 항상 만족되어야할 조건