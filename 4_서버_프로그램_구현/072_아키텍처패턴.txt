아키텍처 패턴
- 아키텍처를 설계할 때 참조할 수 있는 전형적 해결 방식 또는 예제
- 소프트웨어 시스템의 구조를 구성하기 위한 기본적인 윤곽 제시
- 서브시스템들과 그 역할 정의
- 서브시스템 사이의 관계와 여러 규칙, 지침 등 포함
- 종류 : 레이어 패턴, 클라이언트-서버 패턴, 파이프-필터 패턴, 모델-뷰-컨트롤러 패턴

레이어 패턴
- 시스템을 계층으로 구분해 구성하는 고전 방법 패턴
- 상위 계층은 하위 계층에 대한 서비스 제공자, 하위 계층은 상위 계층의 클라이언트
- 서로 마주보는 두 계층 사이에서만 상호작용 이루어짐
- 대표는 OSI 참조 모델

클라이언트-서버 패턴
- 하나의 서버 컴포넌트와 다수의 클라이언트 컴포넌트로 구성
- 사용자가 클라이언트 통해 서버에 요청하면 클라이언트가 응답 받아 사용자에게 제공

파이프-필터 패턴
- 데이터 스트림 절차의 각 단계를 필터로 캡슐화해 파이프를 통해 전송하는 패턴
- 앞 시스템의 처리 결과물을 파이프를 통해 전달받아 처리 후 그 결과물을 다시 파이프를 통해 다음 시스템으로 넘겨줌 반복
- 데이터 변환, 버퍼링, 동기화 등에 주로 사용
- 대표는 UNIX의 쉘

모델-뷰-컨트롤러 패턴
- 서브시스템을 모델, 뷰, 컨트롤러로 구조화
- 컨트롤러가 사용자의 요청 받으면 핵심 기능과 데이터 보관하는 모델을 이용해 뷰에 정보 출력
- 여러개 뷰 만들 수 있음
- 한개의 모델에 대해 여러 개 뷰를 필요로하는 대화형 애플리케이션에 적합

기타 패턴
- 마스터-슬레이브 패턴 : 슬레이브 컴포넌트에서 처리된 결과물을 다시 돌려받는 방식으로 작업 수행(장애허용시스템, 병렬컴퓨팅 시스템)
- 브로커 패턴 : 사용자가 원하는 서비스왙 특성을 브로커 컴포넌트에 요청하면 브로커 컴포넌트가 요청에 맞는 컴포넌트와 사용자 연결(분산환경시스템)
- 피어-투-피어 패턴 : 피어라 불리는 하나의 컴포넌트가 클라이언트가 될 수도, 서버가 될 수도 있는 패턴(파일 공유 네트워크)
- 이벤트-버스 패턴 : 소스가 특정 채널에 이벤트 메시지 발행하면 해당 채널을 구독한 리스너들이 메시지 받아 이벤트 처리(알림 서비스)
- 블랙보드 패턴 : 모든 컴포넌트들이 공유 데이터 저장소와 블랙보드 컴포넌트에 접근이 가능(음성 인식, 차량 식별, 신호 해석)
- 인터프리터 패턴 : 프로그램 코드의 각 라인을 수행하는 방법을 지정, 기호마다 클래스를 갖도록 구성된 패턴(번역기, 컴파일러, 인터프리터)
