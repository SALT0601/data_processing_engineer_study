단위 모듈(Unit Module)
- 소프트웨어 구현에 필요한 여러 동작 중 한가지 동작을 수행하는 기능을 모듈로 구현한 것
- 단위 모듈로 구현되는 하나의 기능을 단위 기능
- 독립적 컴파일 가능, 다른 모듈에 호출되거나 삽입되기도 함
- 구현 과정
-> 단위 기능 명세서 작성(기능 및 코드 명세서나 설계 지침과 같은 단위 기능을 명세화)
-> 입출력 기능 구현(입출력 기능을 위한 알고리즘 및 데이터 구현)
-> 알고리즘 구현(단위 기능별로 모듈 구현)

IPC(Inter-Process Communication)
- 모듈 간 통신 방식을 구현하기 위해 사용되는 대표적인 프로그래밍 인터페이스 집합
- 복수의 프로세스 수행하며 이뤄지는 프로세스 간 통신까지 구현 가능
- 대표 메소드 5가지
-> Shared Memory : 공유 가능한 메모리 구성해 다수의 프로세스가 통신
-> Socket :  네트워크 소켓 이용해 네트워크 경유하는 프로세스 간 통신
-> Semaphores : 공유 자원에 대한 접근 제어를 통해 통신
-> Pipes&named Pipes : Pipe라 불리는 선입선출형태로 구성된 메모리를 여러 프로세스가 공유하여 통신
                             : Pipe는 하나의 프로세스가 이용 중이라면 다른 프로세스는 접근 불가능
-> Message Queuing : 메시지가 발생하면 이를 전달하는 방식으로 통신

단위 모듈 테스트 = 단위 테스트(Unit Test)
- 프로그램 단위 기능으로 구현된 모듈이 정해진 기능을 정확히 수행하는지 검증
- 기준은 단위 모듈에 대한 코드이므로 시스템 수준의 오류는 잡아내지 못함

테스트 케이스(Test Case)
- 구현된 소프트웨어가 사용자의 요구사항 정확하게 준수했는지 확인하기 위한 테스트 항목에 대한 명세서
- 테스트 케이스 이용하지 않은 테스트는 특정 요소에 대한 검증이 누락되거나 불필요한 검증 반복으로 인해 인력과 시간 낭비
- ISO/IEC/IEEE 29119-3 표준에 따른 테스트 케이스 구성 요소
-> 식별자(Identifier) : 항목 식별자, 일련번호
-> 테스트 항목(Test Item) : 테스트 대상(모듈 or 기능)
-> 입력 명세(Input Specification) : 입력 데이터 또는 테스트 조건
-> 출력 명세(Output Specification) : 테스트 케이스 수행 시 예상되는 출력 결과
-> 환경 설정(Environmental Needs) : 필요한 하드웨어나 소프트웨어 환경
-> 특수 절차 요구(Special Procedure Requirement) : 테스트 케이스 수행 시 특별히 요구되는 절차
-> 의존성 기술(Inter-case Depenencies) : 테스트 케이스 간 의존성