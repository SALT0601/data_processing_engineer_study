Python의 활용

Python의 개요
- 객체지향 기능을 지원하는 스크립트 언어, 다른 언어에 비해 문법이 간단함
- C와 Java와 비교
-> 변수의 자료형에 대한 선언이 없음
-> 문자와 문자열을 작은따옴표, 큰따옴표 구분없이 사용 가능하고 ''' ''', """ """ 로도 묶어 표현 가능
-> 문장의 끝을 의미하는 세미콜론 사용할 필요 없음 -> 붙이면 수행 안됨
-> if나 for와 같은 코드 블록을 포함하는 명령문을 작성할 때 중괄호 대신 콜론(:)과 여백으로 구분

- 입출력 함수 : input() - 입력되는 값은 문자열로 취급되어 저장 -> 변수 = input(출력문자) 형태
	       print() - print(출력값1, 출력값2, ... , sep = 분리문자, end = 종료문자) 형태
                            -> sep생략할 경우 기본값은 공백 한칸/ end 생략할 경우 기본값은 줄 나눔
                            -> 세트나 리스트 등 자료형 출력할 경우 중괄호 대괄호 그안의 따옴표 콤마까지 그대로 써야함
		    -> 빈 print() 은 엔터로 취급

- 리스트 : 파이썬은 배열 대신 리스트 자료형을 사용, 리스트는 필요에 따라 개수를 늘리거나 줄일 수 있어 선언 시 크기를 적지 않고 같은 자료형만 저장할 수 있는 배열과 달리 다양한 자료형 저장가능
 -> append() 메소드 : 리스트의 마지막에 값을 추가
     remove() 메소드 : 리스트에서 값을 찾아 삭제. 이후 요소들을 하나씩 앞으로 이동시킴
     pop(위치) : 리스트의 위치에 있는 값 출력하고 해당 요소 삭제
     index(값) : 리스트에서 값이 저장된 요소의 위치 반환
     count(값) : 리스트에서 값이 저장되어 있는 요소들의 개수 반환
     extend(리스트) : 리스트의 끝에 새로운 리스트 추가해 확장
     reverse() : 리스트의 순서 역순으로 뒤집음
     sort() : 리스트를 정렬, 기본값은 오름차순 (sort(reverse = True) 하면 내림차순으로 정렬됨)
     copy() : 리스트틀 복사

- 세트 : 수학에서 배우는 집합과 같은 파이썬의 자료형, 중괄호를 이용해 리스트와 같이 다양한 요소들 저장 다능, 순서가 정해져 있지 않고 중복된 요소는 저장되지 않음
           순차가 정해져 있지 않아 출력 순서는 출력때마다 결과가 달라질 수 있음
 -> updae(세트) : 기본 세트에 새로운 세트 추가해 확장, 중복값은 저장 안됨
     remove(값) : 세트에서 값을 찾아 삭제
     add(값) 메소드 : 세트에 새로운 값 추가
     pop() : 세트의 값 출력하고 요소 삭제 -> 리스트와 달리 인수를 입력하지 못하고 오똔 요소가 출력되고 삭제될지 모름

- range : 연속된 숫자를 생성하는 것, 리스트나 반복문에서 많이 사용
 -> 형식 : range(최종값) - 0에서 최종값 - 1 까지의 연속된 숫자 생성
             range(초기값, 최종값) - 초기값에서 최종값 - 1 까지의 연속된 숫자 생성
             range(초기값, 최종값, 증가값) - 초기값에서 최종값 - 1 까지의 증가값만큼 증가하며 숫자 생성
	 			  - 증가값이 음수인 경우 초기값에서 최종값 + 1 까지의 증가값만큼 감소하며 숫자 생성
 -> range를 사용하지 않은 파이썬의 for문은 자바의 향상된 for문과 사용이 동일

- slice : 문자열이나 리스트와 같은 순차형 객체에서 일부를 잘라 반환하는 기능
 -> 형식 : 객체명[초기위치:최종위치] - 초기위치에서 최종위치 - 1까지의 요소들 가져옴
             객체명[초기위치:최종위치:증가값] - 초기위치에서 최종위치 - 1까지의 증가값 만큼 증가하며 해당 위치의 요소들 가져옴
                                                      - 증가값이 음수인 경우 초기위치에서 최종위치 + 1까지 증가값 만큼 감소하면서 해당위치의 요소들 가져옴
 -> 일부 인수 생략하여 사용 가능
     : 객체명[:] 또는 객체명[::] - 객체의 모든 요소 반환
       객체명[초기위치:] - 객체의 초기위치에서 마지막 위치까지의 요소들 반환
       객체명[:최종위치] - 객체의 0번째 위치에서 최종위치 - 1까지의 요소들 반환
       객체명[::증가값] - 객체의 0번째 위치에서 마지막위치까지 증가값만큼 증가하면서 해당 위치의 요소들 반환
