애플리케이션 성능 개선

소스 코드 최적화
- 나쁜 코드 배제하고 클린 코드로 작성
- 클린 코드 : 누구나 쉽게 이해하고 수정 및 추가할 수 있는 단순 명료한 잘 작성된 코드
- 나쁜 코드 : 프로그램의 로직이 복잡하고 이해하기 어려운 코드(스파게티 코드-코드의 로직이 서로 복잡하게 얽힘, 외계인코드-아주 로래되거나 참고문서나 개발자 없어 유지보수 작업 어려움)
- 나쁜 코드로 작성된 애플리케이션의 코드를 클린 코드로 수정하면 성능 개선됨

클린 코드 작성 원칙
- 가독성 : 누구든지 코드 쉽게 읽을 수 있도록 작성, 이해하기 쉬운 용어 사용 또는 들여쓰기 등 사용
- 단순성 : 간단하게 작성, 한번에 한가지 처리하도록하고 클래스/메소드/함수 등 최소 단위로 분리
- 의존성 배제 : 다른 모듈에 미치는 영향 최소화, 변경 시 다른 부분에 영향 없도록 함
- 중복성 최소화 : 중복 최소화, 중복 코드는 삭제하고 공통 코드 사용
- 추상화 : 상위 클래스/메소드/함수에서 간략히 애플리케이션 특성 나타내고 상세는 하위 클래스/메소드/함수에서 구현

소스 코드 최적화 유형
- 클래스 분할 배치 : 하나의 클래스는 하나의 역할만 수행하도록 응집도 높이고 크기 작게 작성
- 느슨한 결합 : 인터페이스 클래스 이용해 추상화된 자료구조와 메소드 구현해 클래스 간 의존성 최소화

소스 코드 품질 분석 도구
- 코딩 스타일, 코딩 표준, 복잡도, 메모리 누수 현상, 스레드 결함 등 발견 위해 사용
- 정적 분석 도구 : 작성한 코드를 실행하지 않고 코딩 표준이나 코딩 스타일, 결함 등 확인
                     : 종류 - pmd, cppcheck, SonarQube, checkstyle, ccm, cobertura 등
- 동적 분석 도구 : 실행해 코드에 존재하는 메모리 누수, 스레드 결함 분석
                     : 종류 - Avalanche, Valgrind 등

소스 코드 품질 분석 도구의 종류
- pmd : 소스 코드에 대한 미사용 변수, 최적화되지 않은 코드 등 결합 유발할 수 있는 토드 검사 - 리눅스, 윈도우 환경
- cppcheck : C/C++ 코드에 대한 메모리 누수, 오버플로우 등 분석 - 윈도우
- SonarQube : 중복코드, 복잡도, 코딩 설계 등 분석하는 플랫폼 - Cross-Platform
- checkstyle : 자바 코드에 대해 소스 코드 표준 따르는지 검사, 다양한 개발 도구에 통합해 사용 가능 - Cross-Platform
- ccm : 다양한 언어의 코드 복잡도 분석 - Cross-Platform
- cobertura : 자바 언어의 소스 코드 복잡도 분석 및 테스트 커버리지 측정 - Cross-Platform
- Avalanche : Valgrind 프레임워크 및 STP 기반으로 구현, 프로그램에 대한 결함 및 취약점 등 분석 - 리눅스, 안드로이드
- Valgrind : 프로그램 내 존재하는 메모리 및 쓰레드 결함 등 분석 - Cross-Platform